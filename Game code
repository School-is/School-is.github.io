https://School-is.github.io
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Shooter</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: black;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Player setup
        const player = {
            x: canvas.width / 2,
            y: canvas.height - 50,
            width: 30,
            height: 30,
            color: 'blue',
            speed: 5,
        };

        // Bullets array
        const bullets = [];

        // Enemies array
        const enemies = [];

        // Enemy spawn interval
        const spawnInterval = 1000; // 1 second
        let lastSpawnTime = 0;

        // Player controls
        const keys = {
            ArrowLeft: false,
            ArrowRight: false,
            Space: false,
        };

        let touchX = null; // For touch controls

        window.addEventListener('keydown', (e) => keys[e.code] = true);
        window.addEventListener('keyup', (e) => keys[e.code] = false);

        // Touch controls
        canvas.addEventListener('touchstart', (e) => {
            const touch = e.touches[0];
            touchX = touch.clientX;
        });

        canvas.addEventListener('touchmove', (e) => {
            const touch = e.touches[0];
            touchX = touch.clientX;
        });

        canvas.addEventListener('touchend', () => {
            touchX = null;
        });

        function spawnEnemy() {
            const size = Math.random() * 20 + 20;
            enemies.push({
                x: Math.random() * (canvas.width - size),
                y: -size,
                width: size,
                height: size,
                color: 'red',
                speed: Math.random() * 2 + 1,
            });
        }

        function update() {
            // Move player
            if (keys.ArrowLeft && player.x > 0) player.x -= player.speed;
            if (keys.ArrowRight && player.x + player.width < canvas.width) player.x += player.speed;

            if (touchX !== null) {
                if (touchX < player.x + player.width / 2 && player.x > 0) {
                    player.x -= player.speed;
                } else if (touchX > player.x + player.width / 2 && player.x + player.width < canvas.width) {
                    player.x += player.speed;
                }
            }

            // Fire bullets
            if (keys.Space) {
                bullets.push({
                    x: player.x + player.width / 2 - 5,
                    y: player.y,
                    width: 5,
                    height: 10,
                    color: 'yellow',
                    speed: 7,
                });
                keys.Space = false; // Prevent holding the spacebar to spam bullets
            }

            // Move bullets
            bullets.forEach((bullet, index) => {
                bullet.y -= bullet.speed;
                if (bullet.y + bullet.height < 0) bullets.splice(index, 1);
            });

            // Move enemies
            enemies.forEach((enemy, index) => {
                enemy.y += enemy.speed;
                if (enemy.y > canvas.height) enemies.splice(index, 1);
            });

            // Bullet-enemy collisions
            bullets.forEach((bullet, bulletIndex) => {
                enemies.forEach((enemy, enemyIndex) => {
                    if (
                        bullet.x < enemy.x + enemy.width &&
                        bullet.x + bullet.width > enemy.x &&
                        bullet.y < enemy.y + enemy.height &&
                        bullet.y + bullet.height > enemy.y
                    ) {
                        bullets.splice(bulletIndex, 1);
                        enemies.splice(enemyIndex, 1);
                    }
                });
            });

            // Spawn enemies
            if (Date.now() - lastSpawnTime > spawnInterval) {
                spawnEnemy();
                lastSpawnTime = Date.now();
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw player
            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);

            // Draw bullets
            bullets.forEach(bullet => {
                ctx.fillStyle = bullet.color;
                ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
            });

            // Draw enemies
            enemies.forEach(enemy => {
                ctx.fillStyle = enemy.color;
                ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
            });
        }

        function gameLoop() {
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }

        gameLoop();
    </script>
</body>
</html>
